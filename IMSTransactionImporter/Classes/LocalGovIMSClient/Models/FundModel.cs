// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace LocalGovIMSClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class FundModel : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The AccountExist property</summary>
        public bool? AccountExist { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The AquireAddress property</summary>
        public bool? AquireAddress { get; set; }
        /// <summary>The DisplayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The FundCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FundCode { get; set; }
#nullable restore
#else
        public string FundCode { get; set; }
#endif
        /// <summary>The FundName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FundName { get; set; }
#nullable restore
#else
        public string FundName { get; set; }
#endif
        /// <summary>The MaximumAmount property</summary>
        public double? MaximumAmount { get; set; }
        /// <summary>The Metadata property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::LocalGovIMSClient.Models.FundMetadataModel>? Metadata { get; set; }
#nullable restore
#else
        public List<global::LocalGovIMSClient.Models.FundMetadataModel> Metadata { get; set; }
#endif
        /// <summary>The OverPayAccount property</summary>
        public bool? OverPayAccount { get; set; }
        /// <summary>The VatCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VatCode { get; set; }
#nullable restore
#else
        public string VatCode { get; set; }
#endif
        /// <summary>The VatOverride property</summary>
        public bool? VatOverride { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::LocalGovIMSClient.Models.FundModel"/> and sets the default values.
        /// </summary>
        public FundModel()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::LocalGovIMSClient.Models.FundModel"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::LocalGovIMSClient.Models.FundModel CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::LocalGovIMSClient.Models.FundModel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "AccountExist", n => { AccountExist = n.GetBoolValue(); } },
                { "AquireAddress", n => { AquireAddress = n.GetBoolValue(); } },
                { "DisplayName", n => { DisplayName = n.GetStringValue(); } },
                { "FundCode", n => { FundCode = n.GetStringValue(); } },
                { "FundName", n => { FundName = n.GetStringValue(); } },
                { "MaximumAmount", n => { MaximumAmount = n.GetDoubleValue(); } },
                { "Metadata", n => { Metadata = n.GetCollectionOfObjectValues<global::LocalGovIMSClient.Models.FundMetadataModel>(global::LocalGovIMSClient.Models.FundMetadataModel.CreateFromDiscriminatorValue)?.AsList(); } },
                { "OverPayAccount", n => { OverPayAccount = n.GetBoolValue(); } },
                { "VatCode", n => { VatCode = n.GetStringValue(); } },
                { "VatOverride", n => { VatOverride = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("AccountExist", AccountExist);
            writer.WriteBoolValue("AquireAddress", AquireAddress);
            writer.WriteStringValue("DisplayName", DisplayName);
            writer.WriteStringValue("FundCode", FundCode);
            writer.WriteStringValue("FundName", FundName);
            writer.WriteDoubleValue("MaximumAmount", MaximumAmount);
            writer.WriteCollectionOfObjectValues<global::LocalGovIMSClient.Models.FundMetadataModel>("Metadata", Metadata);
            writer.WriteBoolValue("OverPayAccount", OverPayAccount);
            writer.WriteStringValue("VatCode", VatCode);
            writer.WriteBoolValue("VatOverride", VatOverride);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
