// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace LocalGovIMSClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ProcessedTransactionModel : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The AccountReference property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountReference { get; set; }
#nullable restore
#else
        public string AccountReference { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Amount property</summary>
        public double? Amount { get; set; }
        /// <summary>The EntryDate property</summary>
        public DateTimeOffset? EntryDate { get; set; }
        /// <summary>The FundCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FundCode { get; set; }
#nullable restore
#else
        public string FundCode { get; set; }
#endif
        /// <summary>The ImportId property</summary>
        public int? ImportId { get; set; }
        /// <summary>The InternalReference property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InternalReference { get; set; }
#nullable restore
#else
        public string InternalReference { get; set; }
#endif
        /// <summary>The MopCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MopCode { get; set; }
#nullable restore
#else
        public string MopCode { get; set; }
#endif
        /// <summary>The Narrative property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Narrative { get; set; }
#nullable restore
#else
        public string Narrative { get; set; }
#endif
        /// <summary>The OfficeCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OfficeCode { get; set; }
#nullable restore
#else
        public string OfficeCode { get; set; }
#endif
        /// <summary>The PspReference property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PspReference { get; set; }
#nullable restore
#else
        public string PspReference { get; set; }
#endif
        /// <summary>The Reference property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Reference { get; set; }
#nullable restore
#else
        public string Reference { get; set; }
#endif
        /// <summary>The TransactionDate property</summary>
        public DateTimeOffset? TransactionDate { get; set; }
        /// <summary>The UserCode property</summary>
        public int? UserCode { get; set; }
        /// <summary>The VatAmount property</summary>
        public double? VatAmount { get; set; }
        /// <summary>The VatCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VatCode { get; set; }
#nullable restore
#else
        public string VatCode { get; set; }
#endif
        /// <summary>The VatRate property</summary>
        public float? VatRate { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::LocalGovIMSClient.Models.ProcessedTransactionModel"/> and sets the default values.
        /// </summary>
        public ProcessedTransactionModel()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::LocalGovIMSClient.Models.ProcessedTransactionModel"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::LocalGovIMSClient.Models.ProcessedTransactionModel CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::LocalGovIMSClient.Models.ProcessedTransactionModel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "AccountReference", n => { AccountReference = n.GetStringValue(); } },
                { "Amount", n => { Amount = n.GetDoubleValue(); } },
                { "EntryDate", n => { EntryDate = n.GetDateTimeOffsetValue(); } },
                { "FundCode", n => { FundCode = n.GetStringValue(); } },
                { "ImportId", n => { ImportId = n.GetIntValue(); } },
                { "InternalReference", n => { InternalReference = n.GetStringValue(); } },
                { "MopCode", n => { MopCode = n.GetStringValue(); } },
                { "Narrative", n => { Narrative = n.GetStringValue(); } },
                { "OfficeCode", n => { OfficeCode = n.GetStringValue(); } },
                { "PspReference", n => { PspReference = n.GetStringValue(); } },
                { "Reference", n => { Reference = n.GetStringValue(); } },
                { "TransactionDate", n => { TransactionDate = n.GetDateTimeOffsetValue(); } },
                { "UserCode", n => { UserCode = n.GetIntValue(); } },
                { "VatAmount", n => { VatAmount = n.GetDoubleValue(); } },
                { "VatCode", n => { VatCode = n.GetStringValue(); } },
                { "VatRate", n => { VatRate = n.GetFloatValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("AccountReference", AccountReference);
            writer.WriteDoubleValue("Amount", Amount);
            writer.WriteDateTimeOffsetValue("EntryDate", EntryDate);
            writer.WriteStringValue("FundCode", FundCode);
            writer.WriteIntValue("ImportId", ImportId);
            writer.WriteStringValue("InternalReference", InternalReference);
            writer.WriteStringValue("MopCode", MopCode);
            writer.WriteStringValue("Narrative", Narrative);
            writer.WriteStringValue("OfficeCode", OfficeCode);
            writer.WriteStringValue("PspReference", PspReference);
            writer.WriteStringValue("Reference", Reference);
            writer.WriteDateTimeOffsetValue("TransactionDate", TransactionDate);
            writer.WriteIntValue("UserCode", UserCode);
            writer.WriteDoubleValue("VatAmount", VatAmount);
            writer.WriteStringValue("VatCode", VatCode);
            writer.WriteFloatValue("VatRate", VatRate);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
